(in-ns '{{miraj/ns}})

;; (alter-meta! *ns* (fn [m] (assoc m :miraj/miraj {:miraj/elements true
;;                                                  :miraj/nss '{{miraj/nss}}
;;                                                  :miraj/codom "{{miraj/codom}}"
;;                                                  :miraj/assets
;;                                                  {:miraj/bower
;;                                                   [
;; {{#miraj/base.miraj/assets.miraj/bower}}"{{cmd}}" {{/miraj/base.miraj/assets.miraj/bower}}
;;                                                    ]
;;                                                    :miraj/base "{{miraj/base.miraj/assets.miraj/href}}"}})))

(println "loading {{miraj/ns}}")


{{#miraj/exports}}
;;;;;;;; COMPONENT: {{miraj/ns}}/{{miraj/defn}} ;;;;;;;;;;;;;;;;
(defn {{miraj/defn}}
  "{{{miraj/doc.miraj/short}}}

  {{miraj/base.miraj/doc.miraj/href}}{{miraj/doc.miraj/href}}"
  [& args]
  (apply codom/element {{miraj/html-tag}} args))
(alter-meta! (find-var (symbol (str *ns*) "{{miraj/defn}}"))
             (fn [old new] (merge old new))
             {:miraj/miraj {:miraj/co-fn true
                            :miraj/element true
                            :miraj/html-tag {{miraj/html-tag}}
                            :miraj/lib {{miraj/lib}}
                            :miraj/assets {:miraj/href "{{miraj/base.miraj/assets.miraj/href}}{{miraj/assets.miraj/href}}"
                                           :miraj/bower "{{miraj/assets.miraj/bower}}"}
                            :miraj/help "{{miraj/base.miraj/doc.miraj/href}}{{miraj/doc.miraj/href}}"}})

{{/miraj/exports}}

{{#miraj/pragmas}}
(defn {{miraj/defn}}
  "{{{miraj/doc.miraj/short}}}"
  [& fn-args]
  (let [wc-meta {:miraj/miraj {:co-fn true :html-tag {{miraj/html-tag}} ;;  :component '{{lib}}
                         :help "{{miraj/base.help}}{{miraj/doc.miraj/href}}"}
                 :doc "{{miraj/doc.miraj/short}}"}]
    (if-let [msg (if (empty? "{{miraj/non-conforming}}") nil "{{miraj/non-conforming}}")]
      (throw (Exception. (str "{{miraj/attrib}}='{{miraj/defn}}': " msg)))
      (do
        (if (or (empty? fn-args)
                (and (string? (first fn-args)) (empty? (first fn-args))))
          (throw (Exception. (str "HTML pragma directives take one argument: {{miraj/defn}}"))))
        (if (> (count fn-args) 1)
          (throw (Exception. (str "Content not allowed in HTML meta elements: {{miraj/defn}}")))
          (let [attribs {(keyword "{{miraj/attrib}}") "{{miraj/defn}}" :content (str (first fn-args))}]
            (apply codom/element "meta" (list attribs))))))))

{{/miraj/pragmas}}

{{#miraj/html}}
(load "html_spec")
{{/miraj/html}}

(println "loaded {{miraj/ns}}")
